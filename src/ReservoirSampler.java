//------------------------------------------------------------------------------------------------------
import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.net.URL;
import java.util.Random;
import java.util.Scanner;
import javax.net.ssl.HttpsURLConnection;
//------------------------------------------------------------------------------------------------------

public class ReservoirSampler {
	
	// -------------------------------------------------------------------------------------------------
	// Member
	// -------------------------------------------------------------------------------------------------
	// Storage of datastream of unknown length
	private char[] dataStream = null;
	// Fix array for sampled data
	private char[] samples =  null;
	// Amount of samples output by the ReservoirSampler
	private int sampleCount = 0;
	// Main InputReader
	private static Scanner scanner;
	
	// -------------------------------------------------------------------------------------------------
	// Default EntryPoint
	// -------------------------------------------------------------------------------------------------
	
	public static void main(String[] args) {
		
		// Init some default data
		ReservoirSampler sampler = new ReservoirSampler(20);
		scanner = new Scanner(System.in);
		boolean execute = true;
		// start mainloop
		while(execute) {
			
			try {
				
				// Ask for Data Method
				System.out.println("Choose: \n (1) StdIn  \n (2) Random Char Generator  \n (3) Random.org");
				int selection = -1;
				while(selection == -1) {
					
					selection = scanner.nextInt();
					if(selection < 1 || selection > 3) {
						
						System.out.println(selection + " is not in option");
						selection = -1;
					}
					
					if(selection == 1) {
						
						// Fetch data from UserInput
						System.out.println("Enter Source string");
						sampler.Execute(StreamSource.UserInput);
					}
					else if(selection == 2) {
						
						// Fetch data generated by a RandomChar generator
						System.out.println("Fetch Data from RandomGenerator");
						sampler.Execute(StreamSource.Random);
					}
					else {
						
						// Fetch data from Random.org
						System.out.println("Fetching Data from Random.org");
						sampler.Execute(StreamSource.Http);
					}
				}
			}
			catch(Exception e) {
				
				execute = false;
			}
		}
		
	}
	
	// -------------------------------------------------------------------------------------------------
	// Constructor
	// -------------------------------------------------------------------------------------------------
	
	public ReservoirSampler (int sampleCount) {
		
		this.samples = new char[sampleCount];
		this.sampleCount = sampleCount;
	}
	
	// -------------------------------------------------------------------------------------------------
	// Methods
	// -------------------------------------------------------------------------------------------------
	
	public void Execute(StreamSource sourceType) {
		
		// Fetch data with given Method
		this.GetStreamData(sourceType);
		// Print Source Data
		System.out.print("Source: ");
		this.PrintCharArrayLn(this.dataStream);
		// Sample source via reservoir Sampler
		this.samples = this.SampleStream(this.dataStream, this.sampleCount);
		// Print sampled data
		System.out.print("Samples: ");
		this.PrintCharArrayLn(this.samples);
	}
	
	// -------------------------------------------------------------------------------------------------
	
	private void GetStreamData(StreamSource sourceType) {
		
		switch (sourceType) {
		
			default:
			case UserInput:
				
				this.dataStream = this.GetDataFromInput();
				break;
				
			case Random:
				
				this.dataStream = this.GenerateRandomChars(42*42);
				break;
				
			case Http:
				
				this.dataStream = this.GetFromHttp();
				break;

		}
		
	}
	
	// -------------------------------------------------------------------------------------------------
	
	private char[] GetDataFromInput() {
		
		try {
			
			BufferedReader in = new BufferedReader(new InputStreamReader(System.in));
			StringBuilder result = new StringBuilder();
			while(result.length() == 0) {
				result.append(in.readLine());
			}	
			return result.toString().toCharArray();
		}
		catch (Exception e) {
			return new char[0];
		}
	}
	
	// -------------------------------------------------------------------------------------------------
	
	private char[] GenerateRandomChars(int length) {
		
		Random r = new Random();
		// Stringbuilder could be faster with low data length
		char[] output = new char[length];
		for(int i = 0; i < length; ++i) {
			output[i] = (char)(r.nextInt(25)+97);
		}
		return output;
	}
	
	// -------------------------------------------------------------------------------------------------
	
	private char[] GetFromHttp() {
		
		try {
			
			// generate URL from string
			URL url = new URL("https://www.random.org/strings/?num=500&len=20&digits=on&upperalpha=on&loweralpha=on&unique=off&format=plain&rnd=new");
			// establish connection
			HttpsURLConnection connection = (HttpsURLConnection)url.openConnection();
			connection.setRequestMethod("GET");
			// generate reader
			BufferedReader reader = new BufferedReader(new InputStreamReader(connection.getInputStream()));
			String line;
			StringBuilder result = new StringBuilder();
			// read result
			while((line = reader.readLine()) != null) {
				result.append(line);
			}
			reader.close();	
			// return built string ass array
			return result.toString().toCharArray();
		}
		catch(Exception e) {
			
			// return 0-Array if something went wrong
			return new char[0];
		}
	}
	
	// -------------------------------------------------------------------------------------------------
	
	private char[] SampleStream(char[] inputStream, int k) {
		
		// Simple Reservoir Sampler
		char[] reservoir = new char[k];
		int i = 0;
		Random random = new Random();
		// Simulate behaviour for unknown input data length
		for(char sample: inputStream) {
			
			if(i < k) {
				reservoir[i] = sample;
			}
			else {
				
				int j = random.nextInt(i + 1);
				if(j < k) {
					reservoir[j] = sample;
				}
			}
			i++;
		}
		
		return reservoir;
	}
	
	// -------------------------------------------------------------------------------------------------
	/// Output Char-Array in single line build with a Stringbuilder (similar to System.out.print)
	private void PrintCharArray(char[] array) {
		
		StringBuilder builder = new StringBuilder();
		for(int x = 0; x < array.length; x++) {	
			builder.append(array[x]);
		}
		System.out.print(builder.toString());
	}
	
	// -------------------------------------------------------------------------------------------------
	// Print Char-Array similar to System.out.println
	private void PrintCharArrayLn(char[] array) {
		
		PrintCharArray(array);
		System.out.print("\n");
	}
}
